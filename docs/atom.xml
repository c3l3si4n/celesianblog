<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Celesian</title>
	<subtitle>Writeups related to web security, binary exploitation and programming projects.</subtitle>
	<link href="https://celes.in/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://celes.in/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-05-07T00:00:00+00:00</updated>
	<id>https://celes.in/atom.xml</id>
	<entry xml:lang="en">
		<title>Twitter and Web Hacking</title>
		<published>2022-05-07T00:00:00+00:00</published>
		<updated>2022-05-07T00:00:00+00:00</updated>
		<link href="https://celes.in/twitter-and-infosec/" type="text/html"/>
		<id>https://celes.in/twitter-and-infosec/</id>
		<content type="html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.cms-twdigitalassets.com&#x2F;content&#x2F;dam&#x2F;help-twitter&#x2F;logos&#x2F;htc-summary-card.jpg.twimg.768.jpg&quot; alt=&quot;Twitter&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Twitter is a social media platform that works on publishing short texts and links on followers&#x27; feeds. Due to short texts usually being quick to write and share, Twitter is very good to use when you want to know about recent events early. This proves interesting when used in the Web Hacking world, where knowing early about the newest technique or vulnerability can reward you with a bug bounty on a reputable company or first blood in a CTF challenge.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tuning-your-feed&quot;&gt;Tuning your feed&lt;&#x2F;h1&gt;
&lt;p&gt;Your feed is mainly dictated by what content the people you follow post. This presents a common problem present with following many profiles in #infosectwitter which is that even though many of those profiles are managed by very reputable or technically-skilled people, the content they publish is often political off-topic nonsense or, cute but expendable animal pictures.&lt;&#x2F;p&gt;
&lt;p&gt;Off-topic tweets can seem harmless, but they act as noise that distracts you from the actual signal data. When there&#x27;s much uninteresting content in your feed you will automatically zone out while scrolling and won&#x27;t pay attention to an actual good article or vulnerability. &lt;&#x2F;p&gt;
&lt;p&gt;Therefore, if a person you follow consistently posts off-topic content, consider muting that person on your feed so you still follow them while you don&#x27;t see their posts.&lt;&#x2F;p&gt;
&lt;p&gt;The fewer people you follow, the less time you have to scroll Twitter to keep &amp;quot;updated&amp;quot; and the more you will learn per minute you spent reading Twitter. Twitter is best when used like an RSS news aggregator and not a proper friends social media platform.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tweetdeck&quot;&gt;TweetDeck&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.postimg.cc&#x2F;rm2JV0W8&#x2F;tweetdeck.png&quot; alt=&quot;TweetDeck&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Twitter&#x27;s feed has multiple ways of being presented to the user. They are heavily pushing their feed algorithm to show you Unrelated Suggestions or Viral Tweets, which disturbs the experience you want to have with Twitter. Therefore, using alternate clients such as TweetDeck is preferable.&lt;&#x2F;p&gt;
&lt;p&gt;TweetDeck is an alternate Twitter frontend that offers a more convenient Twitter experience by letting you live-monitor multiple timelines or search queries in one easy interface.  This is possible by creating &amp;quot;columns&amp;quot; that update automatically whenever a new tweet matching that column filter is published on the platform, letting you know about new web hacking techniques seconds after it is shared first.&lt;&#x2F;p&gt;
&lt;p&gt;My current TweetDeck columns consist in the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Home&lt;&#x2F;li&gt;
&lt;li&gt;Activity (tweets people I follow liked or people they followed)&lt;&#x2F;li&gt;
&lt;li&gt;Custom search filter to let me know about new unauthenticated vulnerabilities: &lt;code&gt;(preauth OR pre-authenticated OR preauthenticated OR pre-auth OR unauthenticated) AND (rce OR &amp;quot;code execution&amp;quot; OR &amp;quot;code injection&amp;quot; OR &amp;quot;SSRF&amp;quot; OR &amp;quot;XSS&amp;quot;)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;I hope that by reading this article, your Twitter experience will become better. Everything said here is purely anecdotal and is only based on my own experience using Twitter in the last 3 years. If you have any comments or suggestions for this article, please send me a DM on twitter.com&#x2F;c3l3si4n . :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Making a Linux self-destruct password using libpam</title>
		<published>2021-03-15T00:00:00+00:00</published>
		<updated>2021-03-15T00:00:00+00:00</updated>
		<link href="https://celes.in/pam-self-destruct/" type="text/html"/>
		<id>https://celes.in/pam-self-destruct/</id>
		<content type="html">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bluesabre.org&#x2F;content&#x2F;images&#x2F;2019&#x2F;12&#x2F;lightdm-gtk-greeter-1.png&quot; alt=&quot;A screenshot of lightdm&#x27;s lockscreen&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A lock-screen. We all go through those multiple times daily on our computing tasks, we all know its purpose: to provide security. But what if the lock-screen doesn&#x27;t prove to be so secure anymore?&lt;&#x2F;p&gt;
&lt;p&gt;Before I continue, I would like to give a disclaimer. This article has multiple mentionings of a password &amp;quot;protected&amp;quot; system, when I say this I do not mean an powered off system with an encrypted storage disk, but a powered notebook with a login screen present. (such as the ones found in LightDM, GDM, SDDM, etc.)&lt;&#x2F;p&gt;
&lt;p&gt;If you live in a distrustful nation and, for reasons like political activism or others, your notebook gets seized by the police, they will probably ask for your password kindly before trying more complicated (but doable) methods of retrieval. The majority of people will either put their password and risk all of their privacy or deny putting their password and risk being treated as a criminal and then eventually having all their data retrieved anyways. &lt;&#x2F;p&gt;
&lt;p&gt;My view is that any kind of user input going into a system, even one as mundade as a password prompt, can be turned into what you want. Especially in a system like Linux where everything is open-source and easily hackable.&lt;&#x2F;p&gt;
&lt;p&gt;After seeing some local news from a local criminal who tried (and failed miserably) to shut down their computer when a cop asked him to put his password, I started thinking if anyone implemented last effort measures for situations like this -- there were none.&lt;&#x2F;p&gt;
&lt;p&gt;In one episode of the BBC&#x27;s TV Series called Sherlock, there&#x27;s a scene where Sherlock asks a woman for their cellphone password, but the phone had two passwords. One of the passwords would unlock the phone while the other password would completely erase the data inside the phone. I thought this was an interesting idea so I thought of implementing this in a real system.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;linux-pam-the-linux-pluggable-authentication-module&quot;&gt;Linux-PAM, The Linux Pluggable Authentication Module&lt;&#x2F;h1&gt;
&lt;p&gt;According to linux-pam.org:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Linux-PAM (Pluggable Authentication Modules for Linux) is a suite of shared libraries that enable the local system administrator to choose how applications authenticate users. 
&lt;&#x2F;span&gt;&lt;span&gt;In other words, without (rewriting and) recompiling a PAM-aware application, it is possible to switch between the authentication mechanism(s) it uses. Indeed, one may entirely upgrade the local authentication system without touching the applications themselves. 
&lt;&#x2F;span&gt;&lt;span&gt;Linux-PAM (Pluggable Authentication Modules for Linux) is a library that enables the local system administrator to choose how individual applications authenticate users. For an overview of the Linux-PAM library see the Linux-PAM System Administrators&amp;#39; Guide. 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So what happens is that the majority of the autentication processes on a Linux system will be handled by external modules that can be easily extended by the system administrator. This is generally used for enterprise or hardened systems since the autentication of applications like SSH, Sudo and su can now accept multiple methods of authentication like LDAP, Yubi Keys, TOTP&#x2F;HOTP second factor, HTTP or all of the above simultanealy.&lt;&#x2F;p&gt;
&lt;p&gt;This is an interesting persistence vector for a hacker trying to maintain root access to a victim&#x27;s system, since they can easily implement a custom libpam module type of backdoor that always returns an Authentication Succeeded message to the application when his backdoor password is entered. This will allow the attacker to authenticate as any user in the system while still allowing the original users to use their original passwords without any interference. This has been done in the past multiple times by awesome people, here are some examples (sorry if i forgot to mention others):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eurialo&#x2F;pambd&quot;&gt;eurialo&#x2F;pambd&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;0x90909090.blogspot.com&#x2F;2016&#x2F;06&#x2F;creating-backdoor-in-pam-in-5-line-of.html&quot;&gt;Creating a backdoor in pam in 5 lines of code&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zephrax&#x2F;linux-pam-backdoor&quot;&gt;zephrax&#x2F;linux-pam-backdoor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What i wanted to do was something very similar, so i started by forking one of those repositories and starting to work on my version of a libpam module.&lt;br &#x2F;&gt;
After some coding hours, i arrived at this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdlib.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;security&#x2F;pam_appl.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;security&#x2F;pam_modules.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* expected hooks *&#x2F;  
&lt;&#x2F;span&gt;&lt;span&gt;PAM_EXTERN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pam_sm_setcred&lt;&#x2F;span&gt;&lt;span&gt;( pam_handle_t *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pamh&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char &lt;&#x2F;span&gt;&lt;span&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv &lt;&#x2F;span&gt;&lt;span&gt;) {  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; PAM_SUCCESS;  
&lt;&#x2F;span&gt;&lt;span&gt;}  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;PAM_EXTERN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pam_sm_acct_mgmt&lt;&#x2F;span&gt;&lt;span&gt;(pam_handle_t *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pamh&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char &lt;&#x2F;span&gt;&lt;span&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;) {  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Acct mgmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; PAM_SUCCESS;  
&lt;&#x2F;span&gt;&lt;span&gt;}  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* expected hook, this is where custom stuff happens *&#x2F;  
&lt;&#x2F;span&gt;&lt;span&gt;PAM_EXTERN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pam_sm_authenticate&lt;&#x2F;span&gt;&lt;span&gt;( pam_handle_t *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pamh&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char &lt;&#x2F;span&gt;&lt;span&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv &lt;&#x2F;span&gt;&lt;span&gt;) {  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; retval;  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;* pUsername;  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span&gt;* password;  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;	retval = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pam_get_user&lt;&#x2F;span&gt;&lt;span&gt;(pamh, &amp;amp;pUsername, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Username: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pam_get_authtok&lt;&#x2F;span&gt;&lt;span&gt;(pamh, PAM_AUTHTOK, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const char &lt;&#x2F;span&gt;&lt;span&gt;**)&amp;amp;password, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;);  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(retval != PAM_SUCCESS) {  
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; retval;  
&lt;&#x2F;span&gt;&lt;span&gt;	}  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;strcmp&lt;&#x2F;span&gt;&lt;span&gt;(password, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1-step-ahead-of-u&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {  
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If password is not backdoor, give a generic error and do nothing.  
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; PAM_AUTH_ERR;  
&lt;&#x2F;span&gt;&lt;span&gt;	}  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Otherwise, start the self-destruction process.  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;shred &#x2F;dev&#x2F;sda &amp;gt; &#x2F;dev&#x2F;null 2&amp;gt;&#x2F;dev&#x2F;null;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);  
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; PAM_SUCCESS;  
&lt;&#x2F;span&gt;&lt;span&gt;}  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: using the &lt;em&gt;shred&lt;&#x2F;em&gt; command only works with HDD devices, data destruction on SSD and other flash drives is different.&lt;&#x2F;p&gt;
&lt;p&gt;Obs: The full project with build scripts and instructions on how to setup can be found here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;celsec&#x2F;pam-destruct&quot;&gt;celsec&#x2F;pam-destruct&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
